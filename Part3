# Part 3: Encryption and Decryption of Sample Input

# Import the encryption functions from Part 2 (ECB, CBC)
# Block Size: 8 bits
BLOCK_SIZE = 8

# Helper function to convert plaintext string to a list of 8-bit integer blocks
def text_to_blocks(plaintext):
    """Convert plaintext string to 8-bit integer blocks with padding."""
    blocks = []
    for char in plaintext:
        blocks.append(ord(char))  # Convert each character to its ASCII value (8-bit)
    return blocks

# Helper function to convert a list of 8-bit integer blocks back to a string
def blocks_to_text(blocks):
    """Convert a list of 8-bit integer blocks back to plaintext string."""
    return ''.join([chr(block) for block in blocks])

# Padding function for plaintext to ensure block size alignment
def pad_plaintext(plaintext, block_size):
    """Pad the plaintext with zeros to ensure it's a multiple of the block size."""
    padding_length = block_size - (len(plaintext) % block_size)
    return plaintext + ('\0' * padding_length)  # Pad with null characters

# ECB Mode Encryption and Decryption
def ecb_encrypt(plaintext_blocks, key):
    """Encrypt a list of 8-bit plaintext blocks using ECB mode."""
    ciphertext_blocks = []
    for block in plaintext_blocks:
        ciphertext_blocks.append(encrypt_block(block, key))
    return ciphertext_blocks

def ecb_decrypt(ciphertext_blocks, key):
    """Decrypt a list of 8-bit ciphertext blocks using ECB mode."""
    decrypted_blocks = []
    for block in ciphertext_blocks:
        decrypted_blocks.append(encrypt_block(block, key))  # Symmetric decryption
    return decrypted_blocks

# CBC Mode Encryption and Decryption
def cbc_encrypt(plaintext_blocks, key, iv):
    """Encrypt a list of 8-bit plaintext blocks using CBC mode with an IV."""
    ciphertext_blocks = []
    previous_block = iv
    for block in plaintext_blocks:
        block_to_encrypt = block ^ previous_block
        ciphertext_block = encrypt_block(block_to_encrypt, key)
        ciphertext_blocks.append(ciphertext_block)
        previous_block = ciphertext_block
    return ciphertext_blocks

def cbc_decrypt(ciphertext_blocks, key, iv):
    """Decrypt a list of 8-bit ciphertext blocks using CBC mode with an IV."""
    decrypted_blocks = []
    previous_block = iv
    for block in ciphertext_blocks:
        decrypted_block = encrypt_block(block, key)  # Symmetric decryption
        decrypted_block ^= previous_block  # XOR with previous ciphertext (or IV for the first block)
        decrypted_blocks.append(decrypted_block)
        previous_block = block
    return decrypted_blocks

# Example Usage for ECB and CBC Encryption and Decryption
if __name__ == "__main__":
    # Sample input (plaintext message)
    plaintext = "HELLO"
    key = 0b10100101  # Example 8-bit key
    iv = 0b11111111   # Example initialization vector (IV)
    
    # Pad the plaintext to fit block size
    padded_plaintext = pad_plaintext(plaintext, BLOCK_SIZE)
    
    # Convert the padded plaintext into 8-bit blocks
    plaintext_blocks = text_to_blocks(padded_plaintext)
    print(f"Plaintext Blocks (Padded): {[bin(b) for b in plaintext_blocks]}")
    
    # ECB Mode Encryption and Decryption
    print("\nECB Mode:")
    ciphertext_ecb = ecb_encrypt(plaintext_blocks, key)
    print(f"ECB Ciphertext: {[bin(c) for c in ciphertext_ecb]}")
    
    decrypted_ecb = ecb_decrypt(ciphertext_ecb, key)
    decrypted_text_ecb = blocks_to_text(decrypted_ecb).strip('\0')  # Remove padding
    print(f"ECB Decrypted Text: {decrypted_text_ecb}")
    
    # CBC Mode Encryption and Decryption
    print("\nCBC Mode:")
    ciphertext_cbc = cbc_encrypt(plaintext_blocks, key, iv)
    print(f"CBC Ciphertext: {[bin(c) for c in ciphertext_cbc]}")
    
    decrypted_cbc = cbc_decrypt(ciphertext_cbc, key, iv)
    decrypted_text_cbc = blocks_to_text(decrypted_cbc).strip('\0')  # Remove padding
    print(f"CBC Decrypted Text: {decrypted_text_cbc}")
